
"""
Pr√©diction de disponibilit√© V√©lib' avec LSTM
"""

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import List, Dict, Any
import joblib
import asyncio

from api.models.schemas import VelibAvailabilityRequest, VelibAvailabilityResponse
from src.utils.data_loader import load_velib_data
from src.utils.preprocessing import preprocess_velib_data

class VelibAvailabilityPredictor:
    def __init__(self):
        self.model = None
        self.scaler = None
        self.feature_columns = None
        
    async def load_model(self):
        """Charger le mod√®le LSTM pr√©-entra√Æn√©"""
        try:
            # TODO: Charger le mod√®le r√©el
            # self.model = joblib.load('models/velib_lstm_model.pkl')
            # self.scaler = joblib.load('models/velib_scaler.pkl')
            print("Mod√®le LSTM charg√© (simul√©)")
            return True
        except Exception as e:
            print(f"Erreur chargement mod√®le: {e}")
            return False

    async def predict_hourly_availability(self, station_id: int, hours_ahead: int) -> List[Dict]:
        """
        Pr√©dire la disponibilit√© horaire pour une station
        """
        predictions = []
        base_time = datetime.now()
        
        # Simulation de pr√©dictions (√† remplacer par le mod√®le r√©el)
        for hour in range(hours_ahead):
            future_time = base_time + timedelta(hours=hour)
            
            # Simulation bas√©e sur des patterns typiques
            hour_of_day = future_time.hour
            day_of_week = future_time.weekday()
            
            # Pattern de base (√† remplacer par le mod√®le LSTM)
            if 7 <= hour_of_day <= 9 or 17 <= hour_of_day <= 19:  # Heures de pointe
                predicted_bikes = np.random.randint(2, 8)
                predicted_docks = np.random.randint(5, 15)
                risk_level = "high"
            elif 22 <= hour_of_day or hour_of_day <= 6:  # Nuit
                predicted_bikes = np.random.randint(10, 20)
                predicted_docks = np.random.randint(8, 18)
                risk_level = "low"
            else:  # Journ√©e normale
                predicted_bikes = np.random.randint(6, 15)
                predicted_docks = np.random.randint(8, 20)
                risk_level = "medium"
            
            predictions.append({
                "hour": hour,
                "predicted_bikes": predicted_bikes,
                "predicted_docks": predicted_docks,
                "confidence_bikes": 0.85,
                "confidence_docks": 0.83,
                "risk_level": risk_level
            })
        
        return predictions

    async def generate_recommendations(self, predictions: List[Dict], station_name: str) -> List[str]:
        """G√©n√©rer des recommandations bas√©es sur les pr√©dictions"""
        recommendations = []
        
        # Analyser les pr√©dictions pour des recommandations
        low_availability_hours = [p for p in predictions if p["predicted_bikes"] <= 3]
        high_demand_hours = [p for p in predictions if p["risk_level"] == "high"]
        
        if low_availability_hours:
            recommendations.append(f"‚ö†Ô∏è Faible disponibilit√© pr√©vue √† {station_name} dans {len(low_availability_hours)} heures")
        
        if high_demand_hours:
            recommendations.append(f"üî• Forte demande pr√©vue pendant {len(high_demand_hours)} heures - envisager des alternatives")
        
        if not low_availability_hours and not high_demand_hours:
            recommendations.append(f"‚úÖ Disponibilit√© stable pr√©vue √† {station_name}")
        
        return recommendations

# Instance globale du pr√©dicteur
predictor = VelibAvailabilityPredictor()

async def predict_velib_availability(request: VelibAvailabilityRequest) -> VelibAvailabilityResponse:
    """
    Point d'entr√©e principal pour la pr√©diction de disponibilit√© V√©lib'
    """
    # Charger le mod√®le si n√©cessaire
    await predictor.load_model()
    
    # Charger les donn√©es des stations
    stations_data = await load_velib_data(request.station_ids)
    
    station_predictions = []
    
    for station in stations_data:
        station_id = station["station_id"]
        station_name = station["name"]
        
        # Pr√©dictions pour cette station
        hourly_predictions = await predictor.predict_hourly_availability(
            station_id, request.hours_ahead
        )
        
        # Recommandations
        recommendations = await predictor.generate_recommendations(
            hourly_predictions, station_name
        )
        
        station_predictions.append({
            "station_id": station_id,
            "station_name": station_name,
            "predictions": hourly_predictions,
            "recommendations": recommendations
        })
    
    # M√©triques globales
    global_metrics = {
        "total_stations": len(station_predictions),
        "prediction_horizon": request.hours_ahead,
        "high_risk_periods": sum(1 for sp in station_predictions 
                                for pred in sp["predictions"] 
                                if pred["risk_level"] == "high")
    }
    
    return VelibAvailabilityResponse(
        stations=station_predictions,
        global_metrics=global_metrics,
        prediction_accuracy=0.87,  # √Ä calculer avec de vraies m√©triques
        generated_at=datetime.now()
    )
